Q1)
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        
        int n = matrix.size(), m = matrix[0].size();
        
        int start = 0, end = m*n - 1;
        
        while(start <= end){
            int mid = (end - start) / 2 + start;
            
            int r = mid / m;
            int c = mid % m;
            
            if(matrix[r][c] == target){
                return true;
            }
            else if(matrix[r][c] < target){
                start = mid + 1;
            }
            else{
                end = mid - 1;
            }
        }
        
        return false;
    }
};
Q2)
class Solution {
public:
    double myPow(double x, int n) {
        if(n == 0)
            return 1;
        if(n == 1)
            return x;
        
        long long m = n;
        if(n < 0)
            m *= -1;
        
        double ans = 1.0;
        ans *= myPow(x, m/2);
        ans *= ans;
        
        if(m&1){
           ans *= x;
        }
        
        if(n < 0)
            return 1.0 / ans;
        return ans;
    }
};

Q3)
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        
        int cnt = 1;
        int ele = 0;
        
        for(int i=0; i<nums.size(); i++){
            if(ele == nums[i]){
                cnt++;
            }
            else{
                cnt--;
                if(cnt == 0){
                    cnt = 1;
                    ele = nums[i];
                }
            }
        }
        
        return ele;
    }
};

Q4)
class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        
        int ele1 = INT_MAX;
        int ele2 = INT_MAX;
        int f1 = 0, f2 = 0;
        
        int n = nums.size();
        for(int ele:nums){
            if(ele == ele1){
                f1++;
            }
            else if(ele == ele2){
                f2++;
            }
            else if(f1 == 0){
                f1 = 1;
                ele1 = ele;
            }
            else if(f2 == 0){
                f2 = 1;
                ele2 = ele;
            }
            else{
                f1--, f2--;
            }
        }
        
        f1 = 0, f2 = 0;
        for(int ele:nums){
            if(ele == ele1) f1++;
            if(ele == ele2) f2++;
        }
        
        vector<int> res;
        if(f1 > n/3) res.push_back(ele1);
        if(f2 > n/3) res.push_back(ele2);
        
        return res;
    }
};

Q5)
class Solution {
public:
    int dfs(int m, int n, vector<vector<int>>& dp){
        if(m == 0 && n == 0)
            return 1;
        if(m < 0 || n < 0)
            return 0;
        
        if(dp[m][n] != -1)
            return dp[m][n];
        
        dp[m][n] = dfs(m-1, n, dp) + dfs(m, n-1, dp);
        return dp[m][n];
    }
    int uniquePaths(int m, int n) {
        
        vector<vector<int>> dp(m, vector<int>(n, -1));
        return dfs(m-1, n-1, dp);
    }
};

Q6)
class Solution {
public:
    int merge(int l, int mid, int r, vector<int>& nums){
        int i = l;
        int j = mid + 1;
        int k = 0;
        
        vector<int> temp(r-l+1, 0);
        int cnt = 0;
        while(i <= mid && j <= r){
            long long val = 2 * (long long)nums[j];
            if(nums[i] > val){
                cnt += mid - i + 1;
                j++;
            }
            else
                i++;
        }
        
        i = l, j = mid + 1;
        while(i <= mid && j <= r){
            if(nums[i] < nums[j]){
                temp[k++] = nums[i++];
            }
            else{
                temp[k++] = nums[j++];
            }
        }
        
        while(i <= mid){
            temp[k++] = nums[i++];
        }
        while(j <= r){
            temp[k++] = nums[j++];
        }
        
        for(int i=l; i<=r; i++){
            nums[i] = temp[i - l];
        }
        
        return cnt;
    }
    int mergesort(int l, int r, vector<int>& nums){
        
        int cnt = 0;
        if(l < r){
            int mid = (r + l) / 2;
            cnt += mergesort(l, mid, nums);
            cnt += mergesort(mid + 1, r, nums);
            cnt += merge(l, mid, r, nums);
        }
        
        return cnt;
    }
    int reversePairs(vector<int>& nums) {
        
        return mergesort(0, nums.size() - 1, nums);
    }
};
