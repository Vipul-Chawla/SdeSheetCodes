Q1
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        
        ListNode* first = head, *last = head;
        
        if(!head) return head;
        int len = 1;
        while(last->next){
            last = last->next;
            len++;
        }
        
        k %= len;
        for(int i=0; i<len-k-1; i++){
            first = first->next;
        }
        
        last->next = head;
        head = first->next;
        first->next = NULL;
        
        return head;
    }
};

Q2
/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        
        if(!head) return head;
        Node* curr = head;
        while(curr){
            Node* temp = curr->next;
            curr->next = new Node(curr->val);
            curr->next->next = temp;
            curr = temp;
        }
        
        curr = head;
        while(curr && curr->next){
            if(curr->random) curr->next->random = curr->random->next;
            curr = curr->next->next;
        }
        
        Node* newHead = head->next;
        Node* curr2 = newHead;
        curr = head;
        while(curr2){
            curr->next = curr->next->next;
            if(curr2->next) curr2->next = curr2->next->next;
            curr = curr->next;
            curr2 = curr2->next;
        }
        
        return newHead;
    }
};

Q3
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        
        sort(nums.begin(), nums.end());
        
        vector<vector<int>> res;
        int n = nums.size();
        int i = 0;
        while(i < n){
            int left = i+1, right = n-1;
            
            while(left < right){
                if(nums[i] + nums[left] + nums[right] < 0)
                    left++;
                else if(nums[i] + nums[left] + nums[right] > 0)
                    right--;
                else{
                    res.push_back({nums[i], nums[left], nums[right]});
                    
                    left++;
                    while(left < n && nums[left-1] == nums[left]) left++;
                    
                    right--;
                    while(right >= 0 && nums[right+1] == nums[right]) right--;
                }
            }
            
            i++;
            while(i < n && nums[i-1] == nums[i]) i++;
        }
        
        return res;
    }
};

Q4
class Solution {
public:
    int trap(vector<int>& height) {
        
        int n = height.size();
        vector<int> premax(n, 0), postmax(n, 0);
        
        premax[0] = height[0];
        postmax[n-1] = height[n-1];
        
        for(int i=1; i<n; i++){
            premax[i] = max(premax[i-1], height[i]);
            postmax[n-i-1] = max(postmax[n-i], height[n-i-1]);
        }
        
        int sum = 0;
        for(int i=1; i<n; i++){
            sum += min(premax[i], postmax[i]) - height[i];
        }
        
        return sum;
    }
};

Q5
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        
        int i = 0, j = 0;
        int n = nums.size();
        while(j < n){
            while(j < n && nums[j] == nums[i]){
                j++;
            }
            if(j < n){
                nums[i+1] = nums[j];
                i++;
            }
        }
        
        return i+1;
    }
};

Q6
class Solution {
public:
    int findMaxConsecutiveOnes(vector<int>& nums) {
        
        int i = 0, j = 0;
        int res = 0;
        int n = nums.size();
        while(j < n){
            if(nums[j] == 1)
            {
                res = max(res, j-i+1);
                j++;
            }
            else{
                i = j+1;
                j++;
            }
        }
        
        return res;
    }
};
