Q1)
class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        
        bool col0 = 1;
        
        for(int i=0; i<matrix.size(); i++){
            if(matrix[i][0] == 0) col0 = 0;
            
            for(int j=1; j<matrix[0].size(); j++){
                if(matrix[i][j] == 0){
                    matrix[i][0] = 0;
                    matrix[0][j] = 0;
                }
            }
        }
        
        
        for(int i=matrix.size() - 1; i>=0; i--){
            for(int j=matrix[0].size() - 1; j>=1; j--){
                if(matrix[i][0] == 0 || matrix[0][j] == 0){
                    matrix[i][j] = 0;
                }
            }
            if(col0 == 0)
                matrix[i][0] = 0;
        }
        
    }
};
Q2)
class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>> result(numRows);
        
        
        for(int i=0; i<numRows; i++){
            result[i].resize(i+1);
            
            result[i][0] = 1;
            int val = 1;
            int num = i;
            int deno = 1;
            for(int j=1; j<i; j++){
                val *= num;
                val /= deno;
                result[i][j] = val;
                num--;
                deno++;
            }
            result[i][i] = 1;
        }
        
        return result;
    }
};
Q3)
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int n = nums.size();
        int i = n-1, j = n-2;
        
        while(j >= 0 && nums[j] >= nums[i]){
            i--, j--;
        }
        
        if(j < 0){
            reverse(nums.begin(), nums.end());
        } 
        else{
            i = n-1;
            while(j < i){
                if(nums[i] > nums[j]){
                    swap(nums[i], nums[j]);
                    reverse(nums.begin() + j + 1, nums.end());
                    return;
                }
                i--;
            }
        }
    }
};
Q4)
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        
        int maxsofar = nums[0];
        int ans = maxsofar;
        for(int i=1; i<nums.size(); i++){
            if(nums[i] < maxsofar + nums[i]){
                maxsofar += nums[i];
            }
            else
                maxsofar = nums[i];
            ans = max(maxsofar, ans);
        }
        
        return ans;
    }
};
Q5)
class Solution {
public:
    void sortColors(vector<int>& nums) {
        // Dutch National Flag Algorithm
        
        int n = nums.size();
        int low = 0, mid = 0, high = n-1;
        
        while(mid <= high){
            if(nums[mid] == 0){
                swap(nums[low], nums[mid]);
                low ++;
                mid++;
            }
            else if(nums[mid] == 1){
                mid++;
            }
            else{
                swap(nums[mid], nums[high]);
                high--;
            }
        }
    }
};
Q6)
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        
        int minsofar = prices[0];
        int maxprofit = 0;
        for(int i=1; i<prices.size(); i++){
            maxprofit = max(maxprofit, prices[i] - minsofar);
            minsofar = min(prices[i], minsofar);
        }
        
        return maxprofit;
    }
};
