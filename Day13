Q1
#include<bits/stdc++.h>
struct Node{
    Node* arr[2];
};
Node* root = new Node();
void insert(int val){
    Node* curr = root;
    int temp = 1 << 30;
    for(int i=0; i<31; i++){
        bool idx = (temp & val);
        if(curr->arr[idx] == NULL){
            curr->arr[idx] = new Node();
        }
        curr = curr->arr[idx];
        temp >>= 1;
    }
}
int getxor(int x){
    Node* curr = root;
    int temp = 1 << 30;
    int ans = 0;
    for(int i=0; i<31; i++){
        bool idx = (temp & x);
        if(curr->arr[!idx]){
            ans |= temp;  
            curr = curr->arr[!idx];
        }else if(curr->arr[idx]){
            curr = curr->arr[idx];
        }else{
            return ans;
        }
        temp >>= 1;
    }
    return ans;
}
bool static sortsec(vector<int> &a, vector<int>& b){
    return a[1] < b[1];
}
vector<int> maxXorQueries(vector<int> &arr, vector<vector<int>> &queries){
	//	Write your code here.
    sort(arr.begin(), arr.end());
    vector<pair<int, pair<int, int>>> q;
    for(int i=0; i<queries.size(); i++){
        auto v = queries[i];
        q.push_back({v[1], {v[0], i}});
    }
    sort(q.begin(), q.end());
    
    int i = 0;
    vector<int> res(q.size());
    for(int j=0; j<q.size(); j++){
        while(i < arr.size() && arr[i] <= q[j].first){
            insert(arr[i++]);
        }
        if(q[j].first < arr[0])
            res[q[j].second.second] = -1;
        else
        res[q[j].second.second] = getxor(q[j].second.first); 
    }
    root = new Node();
    return res;
}

Q2
class Queue {
public:
    vector<int> arr;
    int j = -1, i = -1;
    Queue() {
        // Implement the Constructor
    }

    /*----------------- Public Functions of Queue -----------------*/

    bool isEmpty() {
        // Implement the isEmpty() function
        return i-j <= 0;
    }

    void enqueue(int data) {
        // Implement the enqueue() function
        arr.push_back(data);
        i++;
    }

    int dequeue() {
        // Implement the dequeue() function
        return i>j ? arr[++j] : -1;
    }

    int front() {
        // Implement the front() function
        return i > j ? arr[j+1] : -1;
    }
};

Q3
class MyStack {
public:
    queue<int> q;
    MyStack() {
        
    }
    
    void push(int x) {
        int sz = q.size();
        q.push(x);
        while(sz > 0){
            int temp = q.front();
            q.pop();
            q.push(temp);
            sz--;
        }
    }
    
    int pop() {
        int ans = q.front();
        q.pop();
        return ans;
    }
    
    int top() {
        return q.front();
    }
    
    bool empty() {
        return q.empty();
    }
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack* obj = new MyStack();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->top();
 * bool param_4 = obj->empty();
 */
 
Q4
class MyQueue {
public:
    stack<int> input, output;
    MyQueue() {
        
    }
    
    void push(int x) {
        input.push(x);
    }
    
    int pop() {
       
       if(output.size()){
            int temp = output.top();
            output.pop();
            return temp;
       }else{
           while(input.size()){
               output.push(input.top());
               input.pop();
           }
            int temp = output.top();
            output.pop();
            return temp;       
       }
    }
    
    int peek() {
       if(output.size()){
            return output.top();
       }else{
           while(!input.empty()){
               output.push(input.top());
               input.pop();
           }
           return output.top();
       }
    }
    
    bool empty() {
        return input.empty() && output.empty();
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue* obj = new MyQueue();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->peek();
 * bool param_4 = obj->empty();
 */
 
Q5
class Solution {
public:
    bool isValid(string s) {
        
        stack<char> st;
        for(char c:s){
            if(c == '(' || c == '{' || c == '['){
                st.push(c);
            }else if(c == ')'){
                if(st.empty() || st.top() != '(')
                    return false;
                st.pop();
            }
            else if(c == '}'){
                if(st.empty() || st.top() != '{')
                    return false;
                st.pop();
            }else{
                if(st.empty() || st.top() != '[')
                    return false;
                st.pop();
            }
        }
        
        return st.empty();
    }
};

Q6
class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        int n = nums2.size();
        map<int, int> mp;
        vector<int> result;
        
        stack<int> st;
        st.push(nums2[n-1]);
        mp[nums2[n-1]] = -1;
        
        for(int i=n-2; i>=0; i--){
            while(!st.empty() && st.top() <= nums2[i]){
                st.pop();
            }
            if(!st.empty()){
                mp[nums2[i]] = st.top();
            }
            else{
                mp[nums2[i]] = -1;
            }
            st.push(nums2[i]);
        }
        
        for(int ele:nums1){
            result.push_back(mp[ele]);
        }
        
        return result;
    }
};

Q7
void sortinsert(stack<int> &stack, int num){
    if(stack.empty() || stack.top() < num){
        stack.push(num);
        return;
    }
    int n = stack.top();
    stack.pop();
    sortinsert(stack, num);
    stack.push(n);
}
void sortStack(stack<int> &stack)
{
	// Write your code here
    if(stack.empty()){
        return;
    }
    int num = stack.top();
    stack.pop();
    
    sortStack(stack);
    sortinsert(stack, num);
}
