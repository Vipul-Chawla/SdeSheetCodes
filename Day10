Q1
class Solution {
public:
    void findpermutation(int idx, vector<int>& nums, vector<vector<int>>& result){
        if(idx >= nums.size())
        {
            result.push_back(nums);
            return;
        }
        
        for(int i=idx; i<nums.size(); i++){
            swap(nums[i], nums[idx]);
            findpermutation(idx+1, nums, result);
            swap(nums[i], nums[idx]);
        }
    }
    vector<vector<int>> permute(vector<int>& nums) {
        
        vector<vector<int>> result;
        findpermutation(0, nums, result);
        return result;
    }
};

Q2
class Solution {
public:
    vector<vector<string>> result;
    bool isSafe(int r, int c, vector<string>& board){
        if(r >= board.size())
            return true;
        
        int i = r-1, j = c;
        while(i >= 0){
            if(board[i--][j] == 'Q')
                return false;
        }
        
        i = r-1, j = c-1;
        while(i >= 0 && j >= 0){
            if(board[i--][j--] == 'Q')
                return false;
        }
        
        i = r-1, j = c+1;
        while(i >= 0 && j < board[0].size()){
            if(board[i--][j++] == 'Q')
                return false;
        }
        
        return true;
    }
    void nqueen(int r, vector<string>& board){
        if(r >= board.size())
        {
            result.push_back(board);
            return;
        }
        
        for(int j=0; j<board[0].size(); j++){
            if(isSafe(r, j, board)){
                board[r][j] = 'Q';
                nqueen(r+1, board);
                board[r][j] = '.';
            }
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        
        string str = "";
        for(int i=0; i<n; i++){
            str += '.';
        }
        vector<string> board(n, str);
        nqueen(0, board);
        
        return result;
    }
};

Q3
class Solution {
public:
    bool isSafe(int r, int c, char val, vector<vector<char>>& board){

        for(int i=0; i<9; i++){
            if(board[i][c] == val) return false;
            if(board[r][i] == val) return false;
            if(board[3*(r/3)+(i/3)][3*(c/3)+(i%3)] == val) return false;
        }
        
        return true;
    }
    bool solver(int r, int c, vector<vector<char>>& board){
                
        if(c >= 9){
            c = 0;
            r++;
        }

        for(int i=0; i<9; i++){
            for(int j=0; j<9; j++){
                if(board[i][j] == '.'){
                    for(int k=1; k<=9; k++){
                        char val = k + '0';
                        if(isSafe(i, j, val, board)){
                            board[i][j] = val;
                            if(solver(i, j+1, board))
                                return true;
                            board[i][j] = '.';
                        }
                    }
                    return false;
                }
            }
        }
        
        return true;
    }
    void solveSudoku(vector<vector<char>>& board) {
        
        solver(0, 0, board);  
    }
};

Q4
// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
// Function to determine if graph can be coloured with at most M colours such
// that no two adjacent vertices of graph are coloured with same colour.
bool isSafe(int node, bool graph[101][101], int n, vector<int>& col, int c){
    
    for(int i=0; i<n; i++){
        if(graph[node][i] && col[i] == c)
            return false;
    }

    return true;
}
bool DFS(int node, bool graph[101][101], int m, int n, vector<int>& col){
    if(node == n)
        return true;
    for(int i=1; i<=m; i++){
        if(isSafe(node, graph, n, col, i)){
            col[node] = i;
            if(DFS(node+1, graph, m, n, col))
                return true;
            col[node] = 0;
        }
    }
    return false;
}
bool graphColoring(bool graph[101][101], int m, int n) {
    // your code here
    
    vector<int> col(n, 0);
    return DFS(0, graph, m, n, col);  
}

// { Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, m, e;
        cin >> n >> m >> e;
        int i;
        bool graph[101][101];
        for (i = 0; i < n; i++) {
            memset(graph[i], 0, sizeof(graph[i]));
        }
        for (i = 0; i < e; i++) {
            int a, b;
            cin >> a >> b;
            graph[a - 1][b - 1] = 1;
            graph[b - 1][a - 1] = 1;
        }
        cout << graphColoring(graph, m, n) << endl;
    }
    return 0;
}
  // } Driver Code Ends
  
Q5
// { Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
// User function template for C++

class Solution{
    public:
    vector<string> result;
    void findway(int r, int c, string curr, vector<vector<int>>& m, int n, vector<vector<bool>>&vis){
        if(r == n-1 && c == n-1){
            if(m[r][c])
                result.push_back(curr);
            return;
        }
        if(r < 0 || c < 0 || r >= n || c >= n){
            return;
        }
        
        if(!m[r][c] || vis[r][c])
            return;
            
        vis[r][c] = true;
        int dir[][2] = {{-1, 0}, {1, 0}, {0, 1}, {0, -1}};
        string note = "UDRL";

        for(int i=0; i<4; i++){
            findway(r+dir[i][0], c + dir[i][1], curr+note[i], m, n, vis);
        }
        vis[r][c] = false;
    }
    vector<string> findPath(vector<vector<int>> &m, int n) {
        // Your code goes here
        vector<vector<bool>>vis(n, vector<bool>(n, false));
        findway(0, 0, "", m, n, vis);
        
        if(!result.size()){
            result.push_back("-1");
        }
        return result;
    }
};

    


// { Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<vector<int>> m(n, vector<int> (n,0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> m[i][j];
            }
        }
        Solution obj;
        vector<string> result = obj.findPath(m, n);
        sort(result.begin(), result.end());
        if (result.size() == 0)
            cout << -1;
        else
            for (int i = 0; i < result.size(); i++) cout << result[i] << " ";
        cout << endl;
    }
    return 0;
}  // } Driver Code Ends

Q6
bool find(string str, vector<string>& dict){
    for(string s : dict){
        if(s == str)
            return true;
    }
    return false;
}
void solver(string &s, int idx, vector<string> &dict, string curr, vector<string>& result){
    if(idx >= s.length()){
        result.push_back(curr);
        return;
    }
    
    string str = "";
    for(int i=idx; i<s.length(); i++){
        str += s[i];
        if(find(str, dict)){
            solver(s, i+1, dict, curr + str + " ", result);
        }
    }
}
vector<string> wordBreak(string &s, vector<string> &dict)
{
    // Write your code here
    
    vector<string> result;
    solver(s, 0, dict, "", result);
    return result;
}
